{"version":3,"sources":["duolingo.png","InputForm.js","LexemInfo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InputForm","props","onFormLayoutChange","size","setState","componentSize","state","layout","onValuesChange","this","bind","Item","Search","placeholder","onChange","enterButton","style","width","React","Component","LexemInfo","playSound","copyTranslation","lexem","Title","level","word","color","exercise","marginTop","marginBottom","translations","join","gutter","xs","sm","md","lg","phrases","map","phrase","id","renderPhrase","key","minWidth","title","text","hoverable","actions","CopyOutlined","onClick","translation_text","SoundOutlined","tts","hidden","twoToneColor","lexem_id","url","Audio","play","el","document","createElement","value","body","appendChild","select","execCommand","removeChild","notification","open","message","description","dict","require","App","searchTerm","dictionary","termExists","getLexemInfo","length","Content","margin","textAlign","padding","maxHeight","src","Duolingo","alt","display","inputChange","backgroundColor","event","target","toLowerCase","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.612ceb91.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/duolingo.cb723b2c.png\";","import React from 'react'\r\nimport {\r\n    Form,\r\n    Input\r\n} from 'antd';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class InputForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            componentSize: 'large'\r\n        }\r\n    }\r\n\r\n    onFormLayoutChange = ({ size }) => {\r\n        this.setState({\r\n            componentSize: size\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Form\r\n                layout=\"vertical\"\r\n                onValuesChange={this.onFormLayoutChange.bind(this)}\r\n                size='large'\r\n            >\r\n                <Form.Item>\r\n                    <Input.Search\r\n                        placeholder=\"Swahili\"\r\n                        onChange={this.props.onChange}\r\n                        size='large'\r\n                        enterButton\r\n                        style={{width: '100%'}}\r\n                    />\r\n                </Form.Item>\r\n            </Form>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nInputForm.propTypes = {\r\n    onChange: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\nimport { Card, Row, Col, Typography, notification, Badge, Tag } from 'antd';\r\nimport { SoundOutlined, CopyOutlined } from '@ant-design/icons';\r\n\r\nexport default class LexemInfo extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.playSound = this.playSound.bind(this)\r\n        this.copyTranslation = this.copyTranslation.bind(this)\r\n    }\r\n\r\n    render() {\r\n        let { lexem } = this.props\r\n\r\n        return (\r\n            <div>\r\n                <Typography.Title level={2}>\r\n                    {lexem.word} <Tag color=\"volcano\">{lexem.exercise}</Tag>\r\n                </Typography.Title>\r\n                <Typography.Title level={3} style={{ marginTop: '5px', marginBottom: '50px' }}>{lexem.translations.join(', ')}</Typography.Title>\r\n                <Row gutter={[16, { xs: 8, sm: 16, md: 24, lg: 32 }]}>\r\n                    {lexem.phrases.map((phrase, id) => {\r\n                        return this.renderPhrase(id, phrase)\r\n                    })}\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderPhrase(id, phrase) {\r\n        return (\r\n            <Col key={id}>\r\n                <Card\r\n                    style={{ minWidth: '200px' }}\r\n                    size=\"small\"\r\n                    title={phrase.text}\r\n                    hoverable\r\n                    actions={[\r\n                        <CopyOutlined key=\"copy\" onClick={() => this.copyTranslation(phrase.translation_text)} />,\r\n                        <SoundOutlined\r\n                            key=\"listen\"\r\n                            onClick={() => { this.playSound(phrase.tts) }}\r\n                            hidden={!phrase.tts}\r\n                            twoToneColor=\"#eb2f96\"\r\n                        />,\r\n                    ]}\r\n                >\r\n                    <p>{phrase.translation_text}</p>\r\n                    <p>{phrase.exercise}</p>\r\n                    <p>{phrase.lexem_id}</p>\r\n                </Card>\r\n            </Col>\r\n        )\r\n    }\r\n\r\n    playSound(url) {\r\n        let audio = new Audio(url)\r\n        audio.play()\r\n    }\r\n\r\n    copyTranslation(text) {\r\n        const el = document.createElement('textarea');\r\n        el.value = text;\r\n        document.body.appendChild(el);\r\n        el.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(el);\r\n        notification.open({\r\n            message: 'Translation copied!',\r\n            description: text\r\n        })\r\n    }\r\n\r\n}","import React, { Component } from 'react'\nimport 'antd/dist/antd.css'\nimport './App.css'\nimport { Layout, Typography, Empty } from 'antd'\nimport InputForm from './InputForm'\nimport LexemInfo from './LexemInfo'\nimport Duolingo from './duolingo.png'\n\nlet dict = require('./db/swahili-by-word.json')\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchTerm: '',\n      dictionary: dict\n    }\n  }\n\n  termExists(searchTerm) {\n    this.setState({\n      termExists: searchTerm in this.state.dictionary\n    })\n  }\n\n  getLexemInfo() {\n    return this.state.dictionary[this.state.searchTerm]\n  }\n\n  render() {\n\n    let lexem = this.getLexemInfo()\n    let description = this.state.searchTerm.length < 2 ? 'Write something like \"Babu\"' : 'Nothing found'\n\n    return (\n      <Layout>\n        <Layout.Content style={{ margin: '0 auto 50px auto', textAlign: 'center', padding: '10px' }}>\n          <img style={{margin: '0 auto', minWidth:'100px', maxHeight: '200px'}} src={Duolingo} alt=\"Duolingo Logo\" />\n          <Typography.Title>Kamusi ya Kiswahili</Typography.Title>\n          <small style={{display: 'block', textAlign: 'left'}}>Translation information from Duolingo</small>\n          <InputForm onChange={this.inputChange.bind(this)} />\n        </Layout.Content>\n        <div style={{ backgroundColor: 'white', padding: '40px' }}>\n          {this.state.termExists ? <LexemInfo lexem={lexem} /> : <Empty description={description} />}\n        </div>\n      </Layout>\n    )\n  }\n\n  inputChange(event) {\n    let searchTerm = event.target.value.toLowerCase()\n    this.setState({ searchTerm: searchTerm })\n    this.termExists(searchTerm)\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}